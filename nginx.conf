server {
    listen 80;
    listen [::]:80;
    server_name www.centralchat.me centralchat.me;
    return 301 https://centralchat.me$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.centralchat.me;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/centralchat.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/centralchat.me/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # Redirect www to non-www
    return 301 https://centralchat.me$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name centralchat.me;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/centralchat.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/centralchat.me/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # Root directory and index files
    root /var/www/centralchat.me/public;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https: http:; font-src 'self' data: https: http:; connect-src 'self' https:;" always;
    
    # Enhanced Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/javascript application/xml application/json application/x-protobuf font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "MSIE [1-6]\.";
    gzip_comp_level 6;
    
    # Brotli compression (if module is available)
    brotli on;
    brotli_comp_level 6;
    brotli_types text/plain text/css text/xml text/javascript application/x-javascript application/javascript application/xml application/json application/x-protobuf font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    
    # Enhanced cache control for static files
    location ~* \.(jpg|jpeg|png|webp|gif|ico|css|js|woff2|woff|ttf)$ {
        expires 1y;
        add_header Cache-Control "public, no-transform, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
        log_not_found off;
        try_files $uri =404;
    }
    
    # Cache control for HTML/XML files
    location ~* \.(html|xml)$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }
    
    # URL normalization
    # Remove trailing slashes
    rewrite ^/(.*)/$ /$1 permanent;
    
    # Remove index.html
    rewrite ^(.*)/index\.html$ $1/ permanent;
    
    # Convert uppercase to lowercase
    if ($request_uri ~ [A-Z]) {
        return 301 $scheme://$server_name$uri_lowercase;
    }
    
    # Main location block with improved error handling
    location / {
        try_files $uri $uri/ /index.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /500.html;
        error_page 403 /403.html;
        error_page 401 /401.html;
    }
    
    # Prevent access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Prevent access to backup/config files
    location ~ \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|engine|git.*|htaccess|htpasswd|svn)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Optional: Add rate limiting for specific endpoints
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        limit_req_status 429;
        try_files $uri $uri/ /index.html;
    }
    
    # Efficient handling of static files
    location ~* \.(?:jpg|jpeg|gif|png|ico|webp|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|woff2|woff|ttf)$ {
        expires 1y;
        access_log off;
        add_header Cache-Control "public, no-transform, immutable";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }
    
    # Handle favicon.ico
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    
    # Handle robots.txt
    location = /robots.txt {
        log_not_found off;
        access_log off;
    }
} 